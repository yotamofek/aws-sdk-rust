// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<
        ::aws_smithy_runtime_api::client::interceptors::context::Error,
    >,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| {
            ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output)
        })
        .map_err(|error| {
            ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error)
        })
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<
    ::aws_smithy_types::error::metadata::Builder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    // S3 HEAD responses have no response body to for an error code. Therefore,
    // check the HTTP response status and populate an error code for 404s.
    if response_body.is_empty() {
        let mut builder = ::aws_smithy_types::error::ErrorMetadata::builder();
        if response_status == 404 {
            builder = builder.code("NotFound");
        }
        Ok(builder)
    } else {
        crate::rest_xml_unwrapped_errors::parse_error_metadata(response_body)
    }
}

pub fn rest_xml_unset_struct_payload() -> ::std::vec::Vec<u8> {
    Vec::new()
}

pub fn parse_event_stream_error_metadata(
    payload: &::bytes::Bytes,
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_xml::decode::XmlDecodeError>
{
    crate::rest_xml_unwrapped_errors::parse_error_metadata(payload.as_ref())
}

pub(crate) mod shape_access_control_policy;
pub(crate) mod shape_bucket_already_exists;
pub(crate) mod shape_bucket_already_owned_by_you;
pub(crate) mod shape_bucket_info;
pub(crate) mod shape_common_prefix;
pub(crate) mod shape_complete_multipart_upload;
pub(crate) mod shape_complete_multipart_upload_input;
pub(crate) mod shape_complete_multipart_upload_output;
pub(crate) mod shape_completed_multipart_upload;
pub(crate) mod shape_completed_part;
pub(crate) mod shape_create_bucket;
pub(crate) mod shape_create_bucket_configuration;
pub(crate) mod shape_create_bucket_input;
pub(crate) mod shape_create_bucket_output;
pub(crate) mod shape_create_multipart_upload;
pub(crate) mod shape_create_multipart_upload_output;
pub(crate) mod shape_delete;
pub(crate) mod shape_delete_bucket;
pub(crate) mod shape_delete_bucket_ownership_controls;
pub(crate) mod shape_delete_object;
pub(crate) mod shape_delete_object_output;
pub(crate) mod shape_delete_objects;
pub(crate) mod shape_delete_objects_input;
pub(crate) mod shape_delete_objects_output;
pub(crate) mod shape_delete_public_access_block;
pub(crate) mod shape_deleted_object;
pub(crate) mod shape_error;
pub(crate) mod shape_get_object;
pub(crate) mod shape_get_object_output;
pub(crate) mod shape_grant;
pub(crate) mod shape_grantee;
pub(crate) mod shape_head_object;
pub(crate) mod shape_head_object_output;
pub(crate) mod shape_invalid_object_state;
pub(crate) mod shape_list_objects_v2;
pub(crate) mod shape_list_objects_v2_output;
pub(crate) mod shape_location_info;
pub(crate) mod shape_no_such_bucket;
pub(crate) mod shape_no_such_key;
pub(crate) mod shape_not_found;
pub(crate) mod shape_object;
pub(crate) mod shape_object_identifier;
pub(crate) mod shape_owner;
pub(crate) mod shape_progress;
pub(crate) mod shape_progress_event;
pub(crate) mod shape_put_bucket_acl;
pub(crate) mod shape_put_bucket_acl_input;
pub(crate) mod shape_put_object;
pub(crate) mod shape_put_object_input;
pub(crate) mod shape_put_object_output;
pub(crate) mod shape_restore_status;
pub(crate) mod shape_stats;
pub(crate) mod shape_stats_event;
pub(crate) mod shape_upload_part;
pub(crate) mod shape_upload_part_input;
pub(crate) mod shape_upload_part_output;
