// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSessionOutput {
    /// <p>The established temporary security credentials for the created session..</p>
    pub credentials: ::std::option::Option<crate::types::SessionCredentials>,
    _extended_request_id: Option<String>,
    _request_id: Option<String>,
}
impl CreateSessionOutput {
    /// <p>The established temporary security credentials for the created session..</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::SessionCredentials> {
        self.credentials.as_ref()
    }
}
impl crate::s3_request_id::RequestIdExt for CreateSessionOutput {
    fn extended_request_id(&self) -> Option<&str> {
        self._extended_request_id.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSessionOutput {
    /// Creates a new builder-style object to manufacture [`CreateSessionOutput`](crate::operation::create_session::CreateSessionOutput).
    pub fn builder() -> crate::operation::create_session::builders::CreateSessionOutputBuilder {
        crate::operation::create_session::builders::CreateSessionOutputBuilder::default()
    }
}

/// A builder for [`CreateSessionOutput`](crate::operation::create_session::CreateSessionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSessionOutputBuilder {
    pub(crate) credentials: ::std::option::Option<crate::types::SessionCredentials>,
    _extended_request_id: Option<String>,
    _request_id: Option<String>,
}
impl CreateSessionOutputBuilder {
    /// <p>The established temporary security credentials for the created session..</p>
    /// This field is required.
    pub fn credentials(mut self, input: crate::types::SessionCredentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The established temporary security credentials for the created session..</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::SessionCredentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The established temporary security credentials for the created session..</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::SessionCredentials> {
        &self.credentials
    }
    pub(crate) fn _extended_request_id(mut self, extended_request_id: impl Into<String>) -> Self {
        self._extended_request_id = Some(extended_request_id.into());
        self
    }

    pub(crate) fn _set_extended_request_id(&mut self, extended_request_id: Option<String>) -> &mut Self {
        self._extended_request_id = extended_request_id;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateSessionOutput`](crate::operation::create_session::CreateSessionOutput).
    pub fn build(self) -> crate::operation::create_session::CreateSessionOutput {
        crate::operation::create_session::CreateSessionOutput {
            credentials: self.credentials,
            _extended_request_id: self._extended_request_id,
            _request_id: self._request_id,
        }
    }
}
