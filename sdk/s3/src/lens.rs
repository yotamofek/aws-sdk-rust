// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_directory_buckets_output_output_continuation_token(
    input: &crate::operation::list_directory_buckets::ListDirectoryBucketsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.continuation_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_objects_v2_output_output_next_continuation_token(
    input: &crate::operation::list_objects_v2::ListObjectsV2Output,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_continuation_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_parts_output_output_next_part_number_marker(
    input: &crate::operation::list_parts::ListPartsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_part_number_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_directory_buckets_output_output_buckets(
    input: crate::operation::list_directory_buckets::ListDirectoryBucketsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Bucket>> {
    let input = match input.buckets {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_parts_output_output_parts(
    input: crate::operation::list_parts::ListPartsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Part>> {
    let input = match input.parts {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
