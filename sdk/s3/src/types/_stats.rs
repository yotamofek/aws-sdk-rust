// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the stats details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Stats {
    /// <p>The total number of object bytes scanned.</p>
    pub bytes_scanned: ::std::option::Option<i64>,
    /// <p>The total number of uncompressed object bytes processed.</p>
    pub bytes_processed: ::std::option::Option<i64>,
    /// <p>The total number of bytes of records payload data returned.</p>
    pub bytes_returned: ::std::option::Option<i64>,
}
impl Stats {
    /// <p>The total number of object bytes scanned.</p>
    pub fn bytes_scanned(&self) -> ::std::option::Option<i64> {
        self.bytes_scanned
    }
    /// <p>The total number of uncompressed object bytes processed.</p>
    pub fn bytes_processed(&self) -> ::std::option::Option<i64> {
        self.bytes_processed
    }
    /// <p>The total number of bytes of records payload data returned.</p>
    pub fn bytes_returned(&self) -> ::std::option::Option<i64> {
        self.bytes_returned
    }
}
impl Stats {
    /// Creates a new builder-style object to manufacture [`Stats`](crate::types::Stats).
    pub fn builder() -> crate::types::builders::StatsBuilder {
        crate::types::builders::StatsBuilder::default()
    }
}

/// A builder for [`Stats`](crate::types::Stats).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StatsBuilder {
    pub(crate) bytes_scanned: ::std::option::Option<i64>,
    pub(crate) bytes_processed: ::std::option::Option<i64>,
    pub(crate) bytes_returned: ::std::option::Option<i64>,
}
impl StatsBuilder {
    /// <p>The total number of object bytes scanned.</p>
    pub fn bytes_scanned(mut self, input: i64) -> Self {
        self.bytes_scanned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of object bytes scanned.</p>
    pub fn set_bytes_scanned(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_scanned = input;
        self
    }
    /// <p>The total number of object bytes scanned.</p>
    pub fn get_bytes_scanned(&self) -> &::std::option::Option<i64> {
        &self.bytes_scanned
    }
    /// <p>The total number of uncompressed object bytes processed.</p>
    pub fn bytes_processed(mut self, input: i64) -> Self {
        self.bytes_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of uncompressed object bytes processed.</p>
    pub fn set_bytes_processed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_processed = input;
        self
    }
    /// <p>The total number of uncompressed object bytes processed.</p>
    pub fn get_bytes_processed(&self) -> &::std::option::Option<i64> {
        &self.bytes_processed
    }
    /// <p>The total number of bytes of records payload data returned.</p>
    pub fn bytes_returned(mut self, input: i64) -> Self {
        self.bytes_returned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of bytes of records payload data returned.</p>
    pub fn set_bytes_returned(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_returned = input;
        self
    }
    /// <p>The total number of bytes of records payload data returned.</p>
    pub fn get_bytes_returned(&self) -> &::std::option::Option<i64> {
        &self.bytes_returned
    }
    /// Consumes the builder and constructs a [`Stats`](crate::types::Stats).
    pub fn build(self) -> crate::types::Stats {
        crate::types::Stats {
            bytes_scanned: self.bytes_scanned,
            bytes_processed: self.bytes_processed,
            bytes_returned: self.bytes_returned,
        }
    }
}
