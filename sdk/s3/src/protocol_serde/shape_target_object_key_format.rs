// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_target_object_key_format(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TargetObjectKeyFormat, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TargetObjectKeyFormat::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SimplePrefix") /* SimplePrefix com.amazonaws.s3#TargetObjectKeyFormat$SimplePrefix */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_simple_prefix::de_simple_prefix(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_simple_prefix(var_1);
            }
            ,
            s if s.matches("PartitionedPrefix") /* PartitionedPrefix com.amazonaws.s3#TargetObjectKeyFormat$PartitionedPrefix */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_partitioned_prefix::de_partitioned_prefix(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_partitioned_prefix(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn ser_target_object_key_format(
    input: &crate::types::TargetObjectKeyFormat,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(_var_3) = &input.simple_prefix {
        scope.start_el("SimplePrefix").finish();
    }
    if let Some(var_4) = &input.partitioned_prefix {
        let inner_writer = scope.start_el("PartitionedPrefix");
        crate::protocol_serde::shape_partitioned_prefix::ser_partitioned_prefix(var_4, inner_writer)?
    }
    scope.finish();
    Ok(())
}
