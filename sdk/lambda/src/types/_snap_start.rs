// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html">Lambda SnapStart</a> setting. Set <code>ApplyOn</code> to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnapStart {
    /// <p>Set to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p>
    pub apply_on: ::std::option::Option<crate::types::SnapStartApplyOn>,
}
impl SnapStart {
    /// <p>Set to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p>
    pub fn apply_on(&self) -> ::std::option::Option<&crate::types::SnapStartApplyOn> {
        self.apply_on.as_ref()
    }
}
impl SnapStart {
    /// Creates a new builder-style object to manufacture [`SnapStart`](crate::types::SnapStart).
    pub fn builder() -> crate::types::builders::SnapStartBuilder {
        crate::types::builders::SnapStartBuilder::default()
    }
}

/// A builder for [`SnapStart`](crate::types::SnapStart).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnapStartBuilder {
    pub(crate) apply_on: ::std::option::Option<crate::types::SnapStartApplyOn>,
}
impl SnapStartBuilder {
    /// <p>Set to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p>
    pub fn apply_on(mut self, input: crate::types::SnapStartApplyOn) -> Self {
        self.apply_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p>
    pub fn set_apply_on(mut self, input: ::std::option::Option<crate::types::SnapStartApplyOn>) -> Self {
        self.apply_on = input;
        self
    }
    /// <p>Set to <code>PublishedVersions</code> to create a snapshot of the initialized execution environment when you publish a function version.</p>
    pub fn get_apply_on(&self) -> &::std::option::Option<crate::types::SnapStartApplyOn> {
        &self.apply_on
    }
    /// Consumes the builder and constructs a [`SnapStart`](crate::types::SnapStart).
    pub fn build(self) -> crate::types::SnapStart {
        crate::types::SnapStart { apply_on: self.apply_on }
    }
}
