// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut builder = crate::json_errors::parse_error_metadata(response_body, response_headers)?;
    if let Some((error_code, error_type)) = crate::aws_query_compatible_errors::parse_aws_query_compatible_error(response_headers) {
        builder = builder.code(error_code);
        builder = builder.custom("type", error_type);
    }
    Ok(builder)
}

pub(crate) mod shape_add_permission;

pub(crate) mod shape_cancel_message_move_task;

pub(crate) mod shape_change_message_visibility;

pub(crate) mod shape_change_message_visibility_batch;

pub(crate) mod shape_create_queue;

pub(crate) mod shape_delete_message;

pub(crate) mod shape_delete_message_batch;

pub(crate) mod shape_delete_queue;

pub(crate) mod shape_get_queue_attributes;

pub(crate) mod shape_get_queue_url;

pub(crate) mod shape_list_dead_letter_source_queues;

pub(crate) mod shape_list_message_move_tasks;

pub(crate) mod shape_list_queue_tags;

pub(crate) mod shape_list_queues;

pub(crate) mod shape_purge_queue;

pub(crate) mod shape_receive_message;

pub(crate) mod shape_remove_permission;

pub(crate) mod shape_send_message;

pub(crate) mod shape_send_message_batch;

pub(crate) mod shape_set_queue_attributes;

pub(crate) mod shape_start_message_move_task;

pub(crate) mod shape_tag_queue;

pub(crate) mod shape_untag_queue;

pub(crate) mod shape_add_permission_input;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_batch_entry_ids_not_distinct;

pub(crate) mod shape_batch_request_too_long;

pub(crate) mod shape_cancel_message_move_task_input;

pub(crate) mod shape_change_message_visibility_batch_input;

pub(crate) mod shape_change_message_visibility_input;

pub(crate) mod shape_create_queue_input;

pub(crate) mod shape_delete_message_batch_input;

pub(crate) mod shape_delete_message_input;

pub(crate) mod shape_delete_queue_input;

pub(crate) mod shape_empty_batch_request;

pub(crate) mod shape_get_queue_attributes_input;

pub(crate) mod shape_get_queue_url_input;

pub(crate) mod shape_invalid_address;

pub(crate) mod shape_invalid_attribute_name;

pub(crate) mod shape_invalid_attribute_value;

pub(crate) mod shape_invalid_batch_entry_id;

pub(crate) mod shape_invalid_id_format;

pub(crate) mod shape_invalid_message_contents;

pub(crate) mod shape_invalid_security;

pub(crate) mod shape_kms_access_denied;

pub(crate) mod shape_kms_disabled;

pub(crate) mod shape_kms_invalid_key_usage;

pub(crate) mod shape_kms_invalid_state;

pub(crate) mod shape_kms_not_found;

pub(crate) mod shape_kms_opt_in_required;

pub(crate) mod shape_kms_throttled;

pub(crate) mod shape_list_dead_letter_source_queues_input;

pub(crate) mod shape_list_message_move_tasks_input;

pub(crate) mod shape_list_queue_tags_input;

pub(crate) mod shape_list_queues_input;

pub(crate) mod shape_message_not_inflight;

pub(crate) mod shape_over_limit;

pub(crate) mod shape_purge_queue_in_progress;

pub(crate) mod shape_purge_queue_input;

pub(crate) mod shape_queue_deleted_recently;

pub(crate) mod shape_queue_does_not_exist;

pub(crate) mod shape_queue_name_exists;

pub(crate) mod shape_receipt_handle_is_invalid;

pub(crate) mod shape_receive_message_input;

pub(crate) mod shape_remove_permission_input;

pub(crate) mod shape_request_throttled;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_send_message_batch_input;

pub(crate) mod shape_send_message_input;

pub(crate) mod shape_set_queue_attributes_input;

pub(crate) mod shape_start_message_move_task_input;

pub(crate) mod shape_tag_queue_input;

pub(crate) mod shape_too_many_entries_in_batch_request;

pub(crate) mod shape_unsupported_operation;

pub(crate) mod shape_untag_queue_input;

pub(crate) mod shape_batch_result_error_entry_list;

pub(crate) mod shape_change_message_visibility_batch_request_entry;

pub(crate) mod shape_change_message_visibility_batch_result_entry_list;

pub(crate) mod shape_delete_message_batch_request_entry;

pub(crate) mod shape_delete_message_batch_result_entry_list;

pub(crate) mod shape_list_message_move_tasks_result_entry_list;

pub(crate) mod shape_message_attribute_value;

pub(crate) mod shape_message_list;

pub(crate) mod shape_message_system_attribute_value;

pub(crate) mod shape_queue_attribute_map;

pub(crate) mod shape_queue_url_list;

pub(crate) mod shape_send_message_batch_request_entry;

pub(crate) mod shape_send_message_batch_result_entry_list;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_batch_result_error_entry;

pub(crate) mod shape_change_message_visibility_batch_result_entry;

pub(crate) mod shape_delete_message_batch_result_entry;

pub(crate) mod shape_list_message_move_tasks_result_entry;

pub(crate) mod shape_message;

pub(crate) mod shape_send_message_batch_result_entry;

pub(crate) mod shape_message_body_attribute_map;

pub(crate) mod shape_message_system_attribute_map;

pub(crate) mod shape_binary_list;

pub(crate) mod shape_string_list;
