// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of a message movement task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMessageMoveTasksResultEntry {
    /// <p>An identifier associated with a message movement task. When this field is returned in the response of the <code>ListMessageMoveTasks</code> action, it is only populated for tasks that are in RUNNING status.</p>
    pub task_handle: ::std::option::Option<::std::string::String>,
    /// <p>The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the queue that contains the messages to be moved to another queue.</p>
    pub source_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the destination queue if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>DestinationArn</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub destination_arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of messages to be moved per second (the message movement rate), if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>MaxNumberOfMessagesPerSecond</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub max_number_of_messages_per_second: ::std::option::Option<i32>,
    /// <p>The approximate number of messages already moved to the destination queue.</p>
    pub approximate_number_of_messages_moved: i64,
    /// <p>The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.</p>
    pub approximate_number_of_messages_to_move: ::std::option::Option<i64>,
    /// <p>The task failure reason (only included if the task status is FAILED).</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of starting the message movement task.</p>
    pub started_timestamp: i64,
}
impl ListMessageMoveTasksResultEntry {
    /// <p>An identifier associated with a message movement task. When this field is returned in the response of the <code>ListMessageMoveTasks</code> action, it is only populated for tasks that are in RUNNING status.</p>
    pub fn task_handle(&self) -> ::std::option::Option<&str> {
        self.task_handle.as_deref()
    }
    /// <p>The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The ARN of the queue that contains the messages to be moved to another queue.</p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>The ARN of the destination queue if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>DestinationArn</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn destination_arn(&self) -> ::std::option::Option<&str> {
        self.destination_arn.as_deref()
    }
    /// <p>The number of messages to be moved per second (the message movement rate), if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>MaxNumberOfMessagesPerSecond</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn max_number_of_messages_per_second(&self) -> ::std::option::Option<i32> {
        self.max_number_of_messages_per_second
    }
    /// <p>The approximate number of messages already moved to the destination queue.</p>
    pub fn approximate_number_of_messages_moved(&self) -> i64 {
        self.approximate_number_of_messages_moved
    }
    /// <p>The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.</p>
    pub fn approximate_number_of_messages_to_move(&self) -> ::std::option::Option<i64> {
        self.approximate_number_of_messages_to_move
    }
    /// <p>The task failure reason (only included if the task status is FAILED).</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The timestamp of starting the message movement task.</p>
    pub fn started_timestamp(&self) -> i64 {
        self.started_timestamp
    }
}
impl ListMessageMoveTasksResultEntry {
    /// Creates a new builder-style object to manufacture [`ListMessageMoveTasksResultEntry`](crate::types::ListMessageMoveTasksResultEntry).
    pub fn builder() -> crate::types::builders::ListMessageMoveTasksResultEntryBuilder {
        crate::types::builders::ListMessageMoveTasksResultEntryBuilder::default()
    }
}

/// A builder for [`ListMessageMoveTasksResultEntry`](crate::types::ListMessageMoveTasksResultEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListMessageMoveTasksResultEntryBuilder {
    pub(crate) task_handle: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_arn: ::std::option::Option<::std::string::String>,
    pub(crate) max_number_of_messages_per_second: ::std::option::Option<i32>,
    pub(crate) approximate_number_of_messages_moved: ::std::option::Option<i64>,
    pub(crate) approximate_number_of_messages_to_move: ::std::option::Option<i64>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) started_timestamp: ::std::option::Option<i64>,
}
impl ListMessageMoveTasksResultEntryBuilder {
    /// <p>An identifier associated with a message movement task. When this field is returned in the response of the <code>ListMessageMoveTasks</code> action, it is only populated for tasks that are in RUNNING status.</p>
    pub fn task_handle(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_handle = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier associated with a message movement task. When this field is returned in the response of the <code>ListMessageMoveTasks</code> action, it is only populated for tasks that are in RUNNING status.</p>
    pub fn set_task_handle(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_handle = input;
        self
    }
    /// <p>An identifier associated with a message movement task. When this field is returned in the response of the <code>ListMessageMoveTasks</code> action, it is only populated for tasks that are in RUNNING status.</p>
    pub fn get_task_handle(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_handle
    }
    /// <p>The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The ARN of the queue that contains the messages to be moved to another queue.</p>
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the queue that contains the messages to be moved to another queue.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The ARN of the queue that contains the messages to be moved to another queue.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The ARN of the destination queue if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>DestinationArn</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn destination_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the destination queue if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>DestinationArn</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn set_destination_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// <p>The ARN of the destination queue if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>DestinationArn</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn get_destination_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_arn
    }
    /// <p>The number of messages to be moved per second (the message movement rate), if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>MaxNumberOfMessagesPerSecond</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn max_number_of_messages_per_second(mut self, input: i32) -> Self {
        self.max_number_of_messages_per_second = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of messages to be moved per second (the message movement rate), if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>MaxNumberOfMessagesPerSecond</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn set_max_number_of_messages_per_second(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_number_of_messages_per_second = input;
        self
    }
    /// <p>The number of messages to be moved per second (the message movement rate), if it has been specified in the <code>StartMessageMoveTask</code> request. If a <code>MaxNumberOfMessagesPerSecond</code> has not been specified in the <code>StartMessageMoveTask</code> request, this field value will be NULL.</p>
    pub fn get_max_number_of_messages_per_second(&self) -> &::std::option::Option<i32> {
        &self.max_number_of_messages_per_second
    }
    /// <p>The approximate number of messages already moved to the destination queue.</p>
    pub fn approximate_number_of_messages_moved(mut self, input: i64) -> Self {
        self.approximate_number_of_messages_moved = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approximate number of messages already moved to the destination queue.</p>
    pub fn set_approximate_number_of_messages_moved(mut self, input: ::std::option::Option<i64>) -> Self {
        self.approximate_number_of_messages_moved = input;
        self
    }
    /// <p>The approximate number of messages already moved to the destination queue.</p>
    pub fn get_approximate_number_of_messages_moved(&self) -> &::std::option::Option<i64> {
        &self.approximate_number_of_messages_moved
    }
    /// <p>The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.</p>
    pub fn approximate_number_of_messages_to_move(mut self, input: i64) -> Self {
        self.approximate_number_of_messages_to_move = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.</p>
    pub fn set_approximate_number_of_messages_to_move(mut self, input: ::std::option::Option<i64>) -> Self {
        self.approximate_number_of_messages_to_move = input;
        self
    }
    /// <p>The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.</p>
    pub fn get_approximate_number_of_messages_to_move(&self) -> &::std::option::Option<i64> {
        &self.approximate_number_of_messages_to_move
    }
    /// <p>The task failure reason (only included if the task status is FAILED).</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The task failure reason (only included if the task status is FAILED).</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The task failure reason (only included if the task status is FAILED).</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The timestamp of starting the message movement task.</p>
    pub fn started_timestamp(mut self, input: i64) -> Self {
        self.started_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of starting the message movement task.</p>
    pub fn set_started_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_timestamp = input;
        self
    }
    /// <p>The timestamp of starting the message movement task.</p>
    pub fn get_started_timestamp(&self) -> &::std::option::Option<i64> {
        &self.started_timestamp
    }
    /// Consumes the builder and constructs a [`ListMessageMoveTasksResultEntry`](crate::types::ListMessageMoveTasksResultEntry).
    pub fn build(self) -> crate::types::ListMessageMoveTasksResultEntry {
        crate::types::ListMessageMoveTasksResultEntry {
            task_handle: self.task_handle,
            status: self.status,
            source_arn: self.source_arn,
            destination_arn: self.destination_arn,
            max_number_of_messages_per_second: self.max_number_of_messages_per_second,
            approximate_number_of_messages_moved: self.approximate_number_of_messages_moved.unwrap_or_default(),
            approximate_number_of_messages_to_move: self.approximate_number_of_messages_to_move,
            failure_reason: self.failure_reason,
            started_timestamp: self.started_timestamp.unwrap_or_default(),
        }
    }
}
