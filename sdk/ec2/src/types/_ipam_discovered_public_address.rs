// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A public IP Address discovered by IPAM.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamDiscoveredPublicAddress {
    /// <p>The resource discovery ID.</p>
    pub ipam_resource_discovery_id: ::std::option::Option<::std::string::String>,
    /// <p>The Region of the resource the IP address is assigned to.</p>
    pub address_region: ::std::option::Option<::std::string::String>,
    /// <p>The IP address.</p>
    pub address: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the owner of the resource the IP address is assigned to.</p>
    pub address_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The allocation ID of the resource the IP address is assigned to.</p>
    pub address_allocation_id: ::std::option::Option<::std::string::String>,
    /// <p>The association status.</p>
    pub association_status: ::std::option::Option<crate::types::IpamPublicAddressAssociationStatus>,
    /// <p>The IP address type.</p>
    pub address_type: ::std::option::Option<crate::types::IpamPublicAddressType>,
    /// <p>The Amazon Web Services service associated with the IP address.</p>
    pub service: ::std::option::Option<crate::types::IpamPublicAddressAwsService>,
    /// <p>The resource ARN or ID.</p>
    pub service_resource: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC that the resource with the assigned IP address is in.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the subnet that the resource with the assigned IP address is in.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the public IPv4 pool that the resource with the assigned IP address is from.</p>
    pub public_ipv4_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The network interface ID of the resource with the assigned IP address.</p>
    pub network_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The description of the network interface that IP address is assigned to.</p>
    pub network_interface_description: ::std::option::Option<::std::string::String>,
    /// <p>The instance ID of the instance the assigned IP address is assigned to.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Tags associated with the IP address.</p>
    pub tags: ::std::option::Option<crate::types::IpamPublicAddressTags>,
    /// <p>The network border group that the resource that the IP address is assigned to is in.</p>
    pub network_border_group: ::std::option::Option<::std::string::String>,
    /// <p>Security groups associated with the resource that the IP address is assigned to.</p>
    pub security_groups: ::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressSecurityGroup>>,
    /// <p>The last successful resource discovery time.</p>
    pub sample_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl IpamDiscoveredPublicAddress {
    /// <p>The resource discovery ID.</p>
    pub fn ipam_resource_discovery_id(&self) -> ::std::option::Option<&str> {
        self.ipam_resource_discovery_id.as_deref()
    }
    /// <p>The Region of the resource the IP address is assigned to.</p>
    pub fn address_region(&self) -> ::std::option::Option<&str> {
        self.address_region.as_deref()
    }
    /// <p>The IP address.</p>
    pub fn address(&self) -> ::std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>The ID of the owner of the resource the IP address is assigned to.</p>
    pub fn address_owner_id(&self) -> ::std::option::Option<&str> {
        self.address_owner_id.as_deref()
    }
    /// <p>The allocation ID of the resource the IP address is assigned to.</p>
    pub fn address_allocation_id(&self) -> ::std::option::Option<&str> {
        self.address_allocation_id.as_deref()
    }
    /// <p>The association status.</p>
    pub fn association_status(&self) -> ::std::option::Option<&crate::types::IpamPublicAddressAssociationStatus> {
        self.association_status.as_ref()
    }
    /// <p>The IP address type.</p>
    pub fn address_type(&self) -> ::std::option::Option<&crate::types::IpamPublicAddressType> {
        self.address_type.as_ref()
    }
    /// <p>The Amazon Web Services service associated with the IP address.</p>
    pub fn service(&self) -> ::std::option::Option<&crate::types::IpamPublicAddressAwsService> {
        self.service.as_ref()
    }
    /// <p>The resource ARN or ID.</p>
    pub fn service_resource(&self) -> ::std::option::Option<&str> {
        self.service_resource.as_deref()
    }
    /// <p>The ID of the VPC that the resource with the assigned IP address is in.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the subnet that the resource with the assigned IP address is in.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The ID of the public IPv4 pool that the resource with the assigned IP address is from.</p>
    pub fn public_ipv4_pool_id(&self) -> ::std::option::Option<&str> {
        self.public_ipv4_pool_id.as_deref()
    }
    /// <p>The network interface ID of the resource with the assigned IP address.</p>
    pub fn network_interface_id(&self) -> ::std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The description of the network interface that IP address is assigned to.</p>
    pub fn network_interface_description(&self) -> ::std::option::Option<&str> {
        self.network_interface_description.as_deref()
    }
    /// <p>The instance ID of the instance the assigned IP address is assigned to.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Tags associated with the IP address.</p>
    pub fn tags(&self) -> ::std::option::Option<&crate::types::IpamPublicAddressTags> {
        self.tags.as_ref()
    }
    /// <p>The network border group that the resource that the IP address is assigned to is in.</p>
    pub fn network_border_group(&self) -> ::std::option::Option<&str> {
        self.network_border_group.as_deref()
    }
    /// <p>Security groups associated with the resource that the IP address is assigned to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_groups.is_none()`.
    pub fn security_groups(&self) -> &[crate::types::IpamPublicAddressSecurityGroup] {
        self.security_groups.as_deref().unwrap_or_default()
    }
    /// <p>The last successful resource discovery time.</p>
    pub fn sample_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.sample_time.as_ref()
    }
}
impl IpamDiscoveredPublicAddress {
    /// Creates a new builder-style object to manufacture [`IpamDiscoveredPublicAddress`](crate::types::IpamDiscoveredPublicAddress).
    pub fn builder() -> crate::types::builders::IpamDiscoveredPublicAddressBuilder {
        crate::types::builders::IpamDiscoveredPublicAddressBuilder::default()
    }
}

/// A builder for [`IpamDiscoveredPublicAddress`](crate::types::IpamDiscoveredPublicAddress).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpamDiscoveredPublicAddressBuilder {
    pub(crate) ipam_resource_discovery_id: ::std::option::Option<::std::string::String>,
    pub(crate) address_region: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<::std::string::String>,
    pub(crate) address_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) address_allocation_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_status: ::std::option::Option<crate::types::IpamPublicAddressAssociationStatus>,
    pub(crate) address_type: ::std::option::Option<crate::types::IpamPublicAddressType>,
    pub(crate) service: ::std::option::Option<crate::types::IpamPublicAddressAwsService>,
    pub(crate) service_resource: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) public_ipv4_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_description: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<crate::types::IpamPublicAddressTags>,
    pub(crate) network_border_group: ::std::option::Option<::std::string::String>,
    pub(crate) security_groups: ::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressSecurityGroup>>,
    pub(crate) sample_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl IpamDiscoveredPublicAddressBuilder {
    /// <p>The resource discovery ID.</p>
    pub fn ipam_resource_discovery_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_resource_discovery_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource discovery ID.</p>
    pub fn set_ipam_resource_discovery_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_resource_discovery_id = input;
        self
    }
    /// <p>The resource discovery ID.</p>
    pub fn get_ipam_resource_discovery_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_resource_discovery_id
    }
    /// <p>The Region of the resource the IP address is assigned to.</p>
    pub fn address_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region of the resource the IP address is assigned to.</p>
    pub fn set_address_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_region = input;
        self
    }
    /// <p>The Region of the resource the IP address is assigned to.</p>
    pub fn get_address_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_region
    }
    /// <p>The IP address.</p>
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The IP address.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// <p>The ID of the owner of the resource the IP address is assigned to.</p>
    pub fn address_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the owner of the resource the IP address is assigned to.</p>
    pub fn set_address_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_owner_id = input;
        self
    }
    /// <p>The ID of the owner of the resource the IP address is assigned to.</p>
    pub fn get_address_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_owner_id
    }
    /// <p>The allocation ID of the resource the IP address is assigned to.</p>
    pub fn address_allocation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_allocation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The allocation ID of the resource the IP address is assigned to.</p>
    pub fn set_address_allocation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_allocation_id = input;
        self
    }
    /// <p>The allocation ID of the resource the IP address is assigned to.</p>
    pub fn get_address_allocation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_allocation_id
    }
    /// <p>The association status.</p>
    pub fn association_status(mut self, input: crate::types::IpamPublicAddressAssociationStatus) -> Self {
        self.association_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The association status.</p>
    pub fn set_association_status(mut self, input: ::std::option::Option<crate::types::IpamPublicAddressAssociationStatus>) -> Self {
        self.association_status = input;
        self
    }
    /// <p>The association status.</p>
    pub fn get_association_status(&self) -> &::std::option::Option<crate::types::IpamPublicAddressAssociationStatus> {
        &self.association_status
    }
    /// <p>The IP address type.</p>
    pub fn address_type(mut self, input: crate::types::IpamPublicAddressType) -> Self {
        self.address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address type.</p>
    pub fn set_address_type(mut self, input: ::std::option::Option<crate::types::IpamPublicAddressType>) -> Self {
        self.address_type = input;
        self
    }
    /// <p>The IP address type.</p>
    pub fn get_address_type(&self) -> &::std::option::Option<crate::types::IpamPublicAddressType> {
        &self.address_type
    }
    /// <p>The Amazon Web Services service associated with the IP address.</p>
    pub fn service(mut self, input: crate::types::IpamPublicAddressAwsService) -> Self {
        self.service = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services service associated with the IP address.</p>
    pub fn set_service(mut self, input: ::std::option::Option<crate::types::IpamPublicAddressAwsService>) -> Self {
        self.service = input;
        self
    }
    /// <p>The Amazon Web Services service associated with the IP address.</p>
    pub fn get_service(&self) -> &::std::option::Option<crate::types::IpamPublicAddressAwsService> {
        &self.service
    }
    /// <p>The resource ARN or ID.</p>
    pub fn service_resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ARN or ID.</p>
    pub fn set_service_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_resource = input;
        self
    }
    /// <p>The resource ARN or ID.</p>
    pub fn get_service_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_resource
    }
    /// <p>The ID of the VPC that the resource with the assigned IP address is in.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC that the resource with the assigned IP address is in.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC that the resource with the assigned IP address is in.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The ID of the subnet that the resource with the assigned IP address is in.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet that the resource with the assigned IP address is in.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet that the resource with the assigned IP address is in.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The ID of the public IPv4 pool that the resource with the assigned IP address is from.</p>
    pub fn public_ipv4_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_ipv4_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the public IPv4 pool that the resource with the assigned IP address is from.</p>
    pub fn set_public_ipv4_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_ipv4_pool_id = input;
        self
    }
    /// <p>The ID of the public IPv4 pool that the resource with the assigned IP address is from.</p>
    pub fn get_public_ipv4_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_ipv4_pool_id
    }
    /// <p>The network interface ID of the resource with the assigned IP address.</p>
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network interface ID of the resource with the assigned IP address.</p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The network interface ID of the resource with the assigned IP address.</p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_id
    }
    /// <p>The description of the network interface that IP address is assigned to.</p>
    pub fn network_interface_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the network interface that IP address is assigned to.</p>
    pub fn set_network_interface_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_description = input;
        self
    }
    /// <p>The description of the network interface that IP address is assigned to.</p>
    pub fn get_network_interface_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_description
    }
    /// <p>The instance ID of the instance the assigned IP address is assigned to.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance ID of the instance the assigned IP address is assigned to.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The instance ID of the instance the assigned IP address is assigned to.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>Tags associated with the IP address.</p>
    pub fn tags(mut self, input: crate::types::IpamPublicAddressTags) -> Self {
        self.tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Tags associated with the IP address.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::IpamPublicAddressTags>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags associated with the IP address.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::IpamPublicAddressTags> {
        &self.tags
    }
    /// <p>The network border group that the resource that the IP address is assigned to is in.</p>
    pub fn network_border_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_border_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network border group that the resource that the IP address is assigned to is in.</p>
    pub fn set_network_border_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_border_group = input;
        self
    }
    /// <p>The network border group that the resource that the IP address is assigned to is in.</p>
    pub fn get_network_border_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_border_group
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>Security groups associated with the resource that the IP address is assigned to.</p>
    pub fn security_groups(mut self, input: crate::types::IpamPublicAddressSecurityGroup) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input);
        self.security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Security groups associated with the resource that the IP address is assigned to.</p>
    pub fn set_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressSecurityGroup>>) -> Self {
        self.security_groups = input;
        self
    }
    /// <p>Security groups associated with the resource that the IP address is assigned to.</p>
    pub fn get_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressSecurityGroup>> {
        &self.security_groups
    }
    /// <p>The last successful resource discovery time.</p>
    pub fn sample_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.sample_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last successful resource discovery time.</p>
    pub fn set_sample_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.sample_time = input;
        self
    }
    /// <p>The last successful resource discovery time.</p>
    pub fn get_sample_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.sample_time
    }
    /// Consumes the builder and constructs a [`IpamDiscoveredPublicAddress`](crate::types::IpamDiscoveredPublicAddress).
    pub fn build(self) -> crate::types::IpamDiscoveredPublicAddress {
        crate::types::IpamDiscoveredPublicAddress {
            ipam_resource_discovery_id: self.ipam_resource_discovery_id,
            address_region: self.address_region,
            address: self.address,
            address_owner_id: self.address_owner_id,
            address_allocation_id: self.address_allocation_id,
            association_status: self.association_status,
            address_type: self.address_type,
            service: self.service,
            service_resource: self.service_resource,
            vpc_id: self.vpc_id,
            subnet_id: self.subnet_id,
            public_ipv4_pool_id: self.public_ipv4_pool_id,
            network_interface_id: self.network_interface_id,
            network_interface_description: self.network_interface_description,
            instance_id: self.instance_id,
            tags: self.tags,
            network_border_group: self.network_border_group,
            security_groups: self.security_groups,
            sample_time: self.sample_time,
        }
    }
}
