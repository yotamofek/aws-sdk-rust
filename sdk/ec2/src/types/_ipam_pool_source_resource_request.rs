// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource used to provision CIDRs to a resource planning pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPoolSourceResourceRequest {
    /// <p>The source resource ID.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The source resource type.</p>
    pub resource_type: ::std::option::Option<crate::types::IpamPoolSourceResourceType>,
    /// <p>The source resource Region.</p>
    pub resource_region: ::std::option::Option<::std::string::String>,
    /// <p>The source resource owner.</p>
    pub resource_owner: ::std::option::Option<::std::string::String>,
}
impl IpamPoolSourceResourceRequest {
    /// <p>The source resource ID.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The source resource type.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::IpamPoolSourceResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The source resource Region.</p>
    pub fn resource_region(&self) -> ::std::option::Option<&str> {
        self.resource_region.as_deref()
    }
    /// <p>The source resource owner.</p>
    pub fn resource_owner(&self) -> ::std::option::Option<&str> {
        self.resource_owner.as_deref()
    }
}
impl IpamPoolSourceResourceRequest {
    /// Creates a new builder-style object to manufacture [`IpamPoolSourceResourceRequest`](crate::types::IpamPoolSourceResourceRequest).
    pub fn builder() -> crate::types::builders::IpamPoolSourceResourceRequestBuilder {
        crate::types::builders::IpamPoolSourceResourceRequestBuilder::default()
    }
}

/// A builder for [`IpamPoolSourceResourceRequest`](crate::types::IpamPoolSourceResourceRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpamPoolSourceResourceRequestBuilder {
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::IpamPoolSourceResourceType>,
    pub(crate) resource_region: ::std::option::Option<::std::string::String>,
    pub(crate) resource_owner: ::std::option::Option<::std::string::String>,
}
impl IpamPoolSourceResourceRequestBuilder {
    /// <p>The source resource ID.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source resource ID.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The source resource ID.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The source resource type.</p>
    pub fn resource_type(mut self, input: crate::types::IpamPoolSourceResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source resource type.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::IpamPoolSourceResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The source resource type.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::IpamPoolSourceResourceType> {
        &self.resource_type
    }
    /// <p>The source resource Region.</p>
    pub fn resource_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source resource Region.</p>
    pub fn set_resource_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_region = input;
        self
    }
    /// <p>The source resource Region.</p>
    pub fn get_resource_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_region
    }
    /// <p>The source resource owner.</p>
    pub fn resource_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source resource owner.</p>
    pub fn set_resource_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_owner = input;
        self
    }
    /// <p>The source resource owner.</p>
    pub fn get_resource_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_owner
    }
    /// Consumes the builder and constructs a [`IpamPoolSourceResourceRequest`](crate::types::IpamPoolSourceResourceRequest).
    pub fn build(self) -> crate::types::IpamPoolSourceResourceRequest {
        crate::types::IpamPoolSourceResourceRequest {
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            resource_region: self.resource_region,
            resource_owner: self.resource_owner,
        }
    }
}
