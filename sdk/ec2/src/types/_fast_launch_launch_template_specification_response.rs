// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies the launch template that the AMI uses for Windows fast launch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FastLaunchLaunchTemplateSpecificationResponse {
    /// <p>The ID of the launch template that the AMI uses for Windows fast launch.</p>
    pub launch_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the launch template that the AMI uses for Windows fast launch.</p>
    pub launch_template_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the launch template that the AMI uses for Windows fast launch.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl FastLaunchLaunchTemplateSpecificationResponse {
    /// <p>The ID of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn launch_template_id(&self) -> ::std::option::Option<&str> {
        self.launch_template_id.as_deref()
    }
    /// <p>The name of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn launch_template_name(&self) -> ::std::option::Option<&str> {
        self.launch_template_name.as_deref()
    }
    /// <p>The version of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl FastLaunchLaunchTemplateSpecificationResponse {
    /// Creates a new builder-style object to manufacture [`FastLaunchLaunchTemplateSpecificationResponse`](crate::types::FastLaunchLaunchTemplateSpecificationResponse).
    pub fn builder() -> crate::types::builders::FastLaunchLaunchTemplateSpecificationResponseBuilder {
        crate::types::builders::FastLaunchLaunchTemplateSpecificationResponseBuilder::default()
    }
}

/// A builder for [`FastLaunchLaunchTemplateSpecificationResponse`](crate::types::FastLaunchLaunchTemplateSpecificationResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FastLaunchLaunchTemplateSpecificationResponseBuilder {
    pub(crate) launch_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) launch_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl FastLaunchLaunchTemplateSpecificationResponseBuilder {
    /// <p>The ID of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn launch_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn set_launch_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_template_id = input;
        self
    }
    /// <p>The ID of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn get_launch_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_template_id
    }
    /// <p>The name of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn launch_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn set_launch_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_template_name = input;
        self
    }
    /// <p>The name of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn get_launch_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_template_name
    }
    /// <p>The version of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the launch template that the AMI uses for Windows fast launch.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`FastLaunchLaunchTemplateSpecificationResponse`](crate::types::FastLaunchLaunchTemplateSpecificationResponse).
    pub fn build(self) -> crate::types::FastLaunchLaunchTemplateSpecificationResponse {
        crate::types::FastLaunchLaunchTemplateSpecificationResponse {
            launch_template_id: self.launch_template_id,
            launch_template_name: self.launch_template_name,
            version: self.version,
        }
    }
}
