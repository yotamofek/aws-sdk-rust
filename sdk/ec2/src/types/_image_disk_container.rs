// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the disk container object for an import image task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ImageDiskContainer {
    /// <p>The description of the disk image.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The block device mapping for the disk.</p>
    pub device_name: ::std::option::Option<::std::string::String>,
    /// <p>The format of the disk image being imported.</p>
    /// <p>Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> | <code>VMDK</code> | <code>RAW</code></p>
    pub format: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>The S3 bucket for the disk image.</p>
    pub user_bucket: ::std::option::Option<crate::types::UserBucket>,
}
impl ImageDiskContainer {
    /// <p>The description of the disk image.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The block device mapping for the disk.</p>
    pub fn device_name(&self) -> ::std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The format of the disk image being imported.</p>
    /// <p>Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> | <code>VMDK</code> | <code>RAW</code></p>
    pub fn format(&self) -> ::std::option::Option<&str> {
        self.format.as_deref()
    }
    /// <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
    pub fn snapshot_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The S3 bucket for the disk image.</p>
    pub fn user_bucket(&self) -> ::std::option::Option<&crate::types::UserBucket> {
        self.user_bucket.as_ref()
    }
}
impl ::std::fmt::Debug for ImageDiskContainer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImageDiskContainer");
        formatter.field("description", &self.description);
        formatter.field("device_name", &self.device_name);
        formatter.field("format", &self.format);
        formatter.field("snapshot_id", &self.snapshot_id);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("user_bucket", &self.user_bucket);
        formatter.finish()
    }
}
impl ImageDiskContainer {
    /// Creates a new builder-style object to manufacture [`ImageDiskContainer`](crate::types::ImageDiskContainer).
    pub fn builder() -> crate::types::builders::ImageDiskContainerBuilder {
        crate::types::builders::ImageDiskContainerBuilder::default()
    }
}

/// A builder for [`ImageDiskContainer`](crate::types::ImageDiskContainer).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ImageDiskContainerBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) user_bucket: ::std::option::Option<crate::types::UserBucket>,
}
impl ImageDiskContainerBuilder {
    /// <p>The description of the disk image.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the disk image.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the disk image.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The block device mapping for the disk.</p>
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The block device mapping for the disk.</p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The block device mapping for the disk.</p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    /// <p>The format of the disk image being imported.</p>
    /// <p>Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> | <code>VMDK</code> | <code>RAW</code></p>
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of the disk image being imported.</p>
    /// <p>Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> | <code>VMDK</code> | <code>RAW</code></p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the disk image being imported.</p>
    /// <p>Valid values: <code>OVA</code> | <code>VHD</code> | <code>VHDX</code> | <code>VMDK</code> | <code>RAW</code></p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    /// <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>The S3 bucket for the disk image.</p>
    pub fn user_bucket(mut self, input: crate::types::UserBucket) -> Self {
        self.user_bucket = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 bucket for the disk image.</p>
    pub fn set_user_bucket(mut self, input: ::std::option::Option<crate::types::UserBucket>) -> Self {
        self.user_bucket = input;
        self
    }
    /// <p>The S3 bucket for the disk image.</p>
    pub fn get_user_bucket(&self) -> &::std::option::Option<crate::types::UserBucket> {
        &self.user_bucket
    }
    /// Consumes the builder and constructs a [`ImageDiskContainer`](crate::types::ImageDiskContainer).
    pub fn build(self) -> crate::types::ImageDiskContainer {
        crate::types::ImageDiskContainer {
            description: self.description,
            device_name: self.device_name,
            format: self.format,
            snapshot_id: self.snapshot_id,
            url: self.url,
            user_bucket: self.user_bucket,
        }
    }
}
impl ::std::fmt::Debug for ImageDiskContainerBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ImageDiskContainerBuilder");
        formatter.field("description", &self.description);
        formatter.field("device_name", &self.device_name);
        formatter.field("format", &self.format);
        formatter.field("snapshot_id", &self.snapshot_id);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.field("user_bucket", &self.user_bucket);
        formatter.finish()
    }
}
