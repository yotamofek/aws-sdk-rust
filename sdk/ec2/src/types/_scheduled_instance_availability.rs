// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a schedule that is available for your Scheduled Instances.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledInstanceAvailability {
    /// <p>The Availability Zone.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The number of available instances.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The time period for the first schedule to start.</p>
    pub first_slot_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The hourly price for a single instance.</p>
    pub hourly_price: ::std::option::Option<::std::string::String>,
    /// <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The maximum term. The only possible value is 365 days.</p>
    pub max_term_duration_in_days: ::std::option::Option<i32>,
    /// <p>The minimum term. The only possible value is 365 days.</p>
    pub min_term_duration_in_days: ::std::option::Option<i32>,
    /// <p>The network platform.</p>
    pub network_platform: ::std::option::Option<::std::string::String>,
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub platform: ::std::option::Option<::std::string::String>,
    /// <p>The purchase token. This token expires in two hours.</p>
    pub purchase_token: ::std::option::Option<::std::string::String>,
    /// <p>The schedule recurrence.</p>
    pub recurrence: ::std::option::Option<crate::types::ScheduledInstanceRecurrence>,
    /// <p>The number of hours in the schedule.</p>
    pub slot_duration_in_hours: ::std::option::Option<i32>,
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub total_scheduled_instance_hours: ::std::option::Option<i32>,
}
impl ScheduledInstanceAvailability {
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The number of available instances.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The time period for the first schedule to start.</p>
    pub fn first_slot_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.first_slot_start_time.as_ref()
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn hourly_price(&self) -> ::std::option::Option<&str> {
        self.hourly_price.as_deref()
    }
    /// <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The maximum term. The only possible value is 365 days.</p>
    pub fn max_term_duration_in_days(&self) -> ::std::option::Option<i32> {
        self.max_term_duration_in_days
    }
    /// <p>The minimum term. The only possible value is 365 days.</p>
    pub fn min_term_duration_in_days(&self) -> ::std::option::Option<i32> {
        self.min_term_duration_in_days
    }
    /// <p>The network platform.</p>
    pub fn network_platform(&self) -> ::std::option::Option<&str> {
        self.network_platform.as_deref()
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn platform(&self) -> ::std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The purchase token. This token expires in two hours.</p>
    pub fn purchase_token(&self) -> ::std::option::Option<&str> {
        self.purchase_token.as_deref()
    }
    /// <p>The schedule recurrence.</p>
    pub fn recurrence(&self) -> ::std::option::Option<&crate::types::ScheduledInstanceRecurrence> {
        self.recurrence.as_ref()
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn slot_duration_in_hours(&self) -> ::std::option::Option<i32> {
        self.slot_duration_in_hours
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn total_scheduled_instance_hours(&self) -> ::std::option::Option<i32> {
        self.total_scheduled_instance_hours
    }
}
impl ScheduledInstanceAvailability {
    /// Creates a new builder-style object to manufacture [`ScheduledInstanceAvailability`](crate::types::ScheduledInstanceAvailability).
    pub fn builder() -> crate::types::builders::ScheduledInstanceAvailabilityBuilder {
        crate::types::builders::ScheduledInstanceAvailabilityBuilder::default()
    }
}

/// A builder for [`ScheduledInstanceAvailability`](crate::types::ScheduledInstanceAvailability).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduledInstanceAvailabilityBuilder {
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) first_slot_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) hourly_price: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) max_term_duration_in_days: ::std::option::Option<i32>,
    pub(crate) min_term_duration_in_days: ::std::option::Option<i32>,
    pub(crate) network_platform: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<::std::string::String>,
    pub(crate) purchase_token: ::std::option::Option<::std::string::String>,
    pub(crate) recurrence: ::std::option::Option<crate::types::ScheduledInstanceRecurrence>,
    pub(crate) slot_duration_in_hours: ::std::option::Option<i32>,
    pub(crate) total_scheduled_instance_hours: ::std::option::Option<i32>,
}
impl ScheduledInstanceAvailabilityBuilder {
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The number of available instances.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of available instances.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The number of available instances.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The time period for the first schedule to start.</p>
    pub fn first_slot_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.first_slot_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period for the first schedule to start.</p>
    pub fn set_first_slot_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.first_slot_start_time = input;
        self
    }
    /// <p>The time period for the first schedule to start.</p>
    pub fn get_first_slot_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.first_slot_start_time
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn hourly_price(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hourly_price = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn set_hourly_price(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hourly_price = input;
        self
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn get_hourly_price(&self) -> &::std::option::Option<::std::string::String> {
        &self.hourly_price
    }
    /// <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The maximum term. The only possible value is 365 days.</p>
    pub fn max_term_duration_in_days(mut self, input: i32) -> Self {
        self.max_term_duration_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum term. The only possible value is 365 days.</p>
    pub fn set_max_term_duration_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_term_duration_in_days = input;
        self
    }
    /// <p>The maximum term. The only possible value is 365 days.</p>
    pub fn get_max_term_duration_in_days(&self) -> &::std::option::Option<i32> {
        &self.max_term_duration_in_days
    }
    /// <p>The minimum term. The only possible value is 365 days.</p>
    pub fn min_term_duration_in_days(mut self, input: i32) -> Self {
        self.min_term_duration_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum term. The only possible value is 365 days.</p>
    pub fn set_min_term_duration_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_term_duration_in_days = input;
        self
    }
    /// <p>The minimum term. The only possible value is 365 days.</p>
    pub fn get_min_term_duration_in_days(&self) -> &::std::option::Option<i32> {
        &self.min_term_duration_in_days
    }
    /// <p>The network platform.</p>
    pub fn network_platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network platform.</p>
    pub fn set_network_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_platform = input;
        self
    }
    /// <p>The network platform.</p>
    pub fn get_network_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_platform
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn set_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn get_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform
    }
    /// <p>The purchase token. This token expires in two hours.</p>
    pub fn purchase_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.purchase_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The purchase token. This token expires in two hours.</p>
    pub fn set_purchase_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.purchase_token = input;
        self
    }
    /// <p>The purchase token. This token expires in two hours.</p>
    pub fn get_purchase_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.purchase_token
    }
    /// <p>The schedule recurrence.</p>
    pub fn recurrence(mut self, input: crate::types::ScheduledInstanceRecurrence) -> Self {
        self.recurrence = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schedule recurrence.</p>
    pub fn set_recurrence(mut self, input: ::std::option::Option<crate::types::ScheduledInstanceRecurrence>) -> Self {
        self.recurrence = input;
        self
    }
    /// <p>The schedule recurrence.</p>
    pub fn get_recurrence(&self) -> &::std::option::Option<crate::types::ScheduledInstanceRecurrence> {
        &self.recurrence
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn slot_duration_in_hours(mut self, input: i32) -> Self {
        self.slot_duration_in_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn set_slot_duration_in_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.slot_duration_in_hours = input;
        self
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn get_slot_duration_in_hours(&self) -> &::std::option::Option<i32> {
        &self.slot_duration_in_hours
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn total_scheduled_instance_hours(mut self, input: i32) -> Self {
        self.total_scheduled_instance_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn set_total_scheduled_instance_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_scheduled_instance_hours = input;
        self
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn get_total_scheduled_instance_hours(&self) -> &::std::option::Option<i32> {
        &self.total_scheduled_instance_hours
    }
    /// Consumes the builder and constructs a [`ScheduledInstanceAvailability`](crate::types::ScheduledInstanceAvailability).
    pub fn build(self) -> crate::types::ScheduledInstanceAvailability {
        crate::types::ScheduledInstanceAvailability {
            availability_zone: self.availability_zone,
            available_instance_count: self.available_instance_count,
            first_slot_start_time: self.first_slot_start_time,
            hourly_price: self.hourly_price,
            instance_type: self.instance_type,
            max_term_duration_in_days: self.max_term_duration_in_days,
            min_term_duration_in_days: self.min_term_duration_in_days,
            network_platform: self.network_platform,
            platform: self.platform,
            purchase_token: self.purchase_token,
            recurrence: self.recurrence,
            slot_duration_in_hours: self.slot_duration_in_hours,
            total_scheduled_instance_hours: self.total_scheduled_instance_hours,
        }
    }
}
