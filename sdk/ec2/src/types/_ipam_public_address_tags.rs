// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Tags for a public IP address discovered by IPAM.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPublicAddressTags {
    /// <p>Tags for an Elastic IP address.</p>
    pub eip_tags: ::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressTag>>,
}
impl IpamPublicAddressTags {
    /// <p>Tags for an Elastic IP address.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.eip_tags.is_none()`.
    pub fn eip_tags(&self) -> &[crate::types::IpamPublicAddressTag] {
        self.eip_tags.as_deref().unwrap_or_default()
    }
}
impl IpamPublicAddressTags {
    /// Creates a new builder-style object to manufacture [`IpamPublicAddressTags`](crate::types::IpamPublicAddressTags).
    pub fn builder() -> crate::types::builders::IpamPublicAddressTagsBuilder {
        crate::types::builders::IpamPublicAddressTagsBuilder::default()
    }
}

/// A builder for [`IpamPublicAddressTags`](crate::types::IpamPublicAddressTags).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpamPublicAddressTagsBuilder {
    pub(crate) eip_tags: ::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressTag>>,
}
impl IpamPublicAddressTagsBuilder {
    /// Appends an item to `eip_tags`.
    ///
    /// To override the contents of this collection use [`set_eip_tags`](Self::set_eip_tags).
    ///
    /// <p>Tags for an Elastic IP address.</p>
    pub fn eip_tags(mut self, input: crate::types::IpamPublicAddressTag) -> Self {
        let mut v = self.eip_tags.unwrap_or_default();
        v.push(input);
        self.eip_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags for an Elastic IP address.</p>
    pub fn set_eip_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressTag>>) -> Self {
        self.eip_tags = input;
        self
    }
    /// <p>Tags for an Elastic IP address.</p>
    pub fn get_eip_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamPublicAddressTag>> {
        &self.eip_tags
    }
    /// Consumes the builder and constructs a [`IpamPublicAddressTags`](crate::types::IpamPublicAddressTags).
    pub fn build(self) -> crate::types::IpamPublicAddressTags {
        crate::types::IpamPublicAddressTags { eip_tags: self.eip_tags }
    }
}
