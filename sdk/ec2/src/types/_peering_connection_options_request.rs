// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The VPC peering connection options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PeeringConnectionOptionsRequest {
    /// <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
    pub allow_dns_resolution_from_remote_vpc: ::std::option::Option<bool>,
    /// <p>Deprecated.</p>
    pub allow_egress_from_local_classic_link_to_remote_vpc: ::std::option::Option<bool>,
    /// <p>Deprecated.</p>
    pub allow_egress_from_local_vpc_to_remote_classic_link: ::std::option::Option<bool>,
}
impl PeeringConnectionOptionsRequest {
    /// <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn allow_dns_resolution_from_remote_vpc(&self) -> ::std::option::Option<bool> {
        self.allow_dns_resolution_from_remote_vpc
    }
    /// <p>Deprecated.</p>
    pub fn allow_egress_from_local_classic_link_to_remote_vpc(&self) -> ::std::option::Option<bool> {
        self.allow_egress_from_local_classic_link_to_remote_vpc
    }
    /// <p>Deprecated.</p>
    pub fn allow_egress_from_local_vpc_to_remote_classic_link(&self) -> ::std::option::Option<bool> {
        self.allow_egress_from_local_vpc_to_remote_classic_link
    }
}
impl PeeringConnectionOptionsRequest {
    /// Creates a new builder-style object to manufacture [`PeeringConnectionOptionsRequest`](crate::types::PeeringConnectionOptionsRequest).
    pub fn builder() -> crate::types::builders::PeeringConnectionOptionsRequestBuilder {
        crate::types::builders::PeeringConnectionOptionsRequestBuilder::default()
    }
}

/// A builder for [`PeeringConnectionOptionsRequest`](crate::types::PeeringConnectionOptionsRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PeeringConnectionOptionsRequestBuilder {
    pub(crate) allow_dns_resolution_from_remote_vpc: ::std::option::Option<bool>,
    pub(crate) allow_egress_from_local_classic_link_to_remote_vpc: ::std::option::Option<bool>,
    pub(crate) allow_egress_from_local_vpc_to_remote_classic_link: ::std::option::Option<bool>,
}
impl PeeringConnectionOptionsRequestBuilder {
    /// <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn allow_dns_resolution_from_remote_vpc(mut self, input: bool) -> Self {
        self.allow_dns_resolution_from_remote_vpc = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn set_allow_dns_resolution_from_remote_vpc(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_dns_resolution_from_remote_vpc = input;
        self
    }
    /// <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn get_allow_dns_resolution_from_remote_vpc(&self) -> &::std::option::Option<bool> {
        &self.allow_dns_resolution_from_remote_vpc
    }
    /// <p>Deprecated.</p>
    pub fn allow_egress_from_local_classic_link_to_remote_vpc(mut self, input: bool) -> Self {
        self.allow_egress_from_local_classic_link_to_remote_vpc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Deprecated.</p>
    pub fn set_allow_egress_from_local_classic_link_to_remote_vpc(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_egress_from_local_classic_link_to_remote_vpc = input;
        self
    }
    /// <p>Deprecated.</p>
    pub fn get_allow_egress_from_local_classic_link_to_remote_vpc(&self) -> &::std::option::Option<bool> {
        &self.allow_egress_from_local_classic_link_to_remote_vpc
    }
    /// <p>Deprecated.</p>
    pub fn allow_egress_from_local_vpc_to_remote_classic_link(mut self, input: bool) -> Self {
        self.allow_egress_from_local_vpc_to_remote_classic_link = ::std::option::Option::Some(input);
        self
    }
    /// <p>Deprecated.</p>
    pub fn set_allow_egress_from_local_vpc_to_remote_classic_link(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_egress_from_local_vpc_to_remote_classic_link = input;
        self
    }
    /// <p>Deprecated.</p>
    pub fn get_allow_egress_from_local_vpc_to_remote_classic_link(&self) -> &::std::option::Option<bool> {
        &self.allow_egress_from_local_vpc_to_remote_classic_link
    }
    /// Consumes the builder and constructs a [`PeeringConnectionOptionsRequest`](crate::types::PeeringConnectionOptionsRequest).
    pub fn build(self) -> crate::types::PeeringConnectionOptionsRequest {
        crate::types::PeeringConnectionOptionsRequest {
            allow_dns_resolution_from_remote_vpc: self.allow_dns_resolution_from_remote_vpc,
            allow_egress_from_local_classic_link_to_remote_vpc: self.allow_egress_from_local_classic_link_to_remote_vpc,
            allow_egress_from_local_vpc_to_remote_classic_link: self.allow_egress_from_local_vpc_to_remote_classic_link,
        }
    }
}
