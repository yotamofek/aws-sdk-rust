// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a subnet for a VPC endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubnetConfiguration {
    /// <p>The ID of the subnet.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.</p>
    /// <p>If you specify an IPv4 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub ipv4: ::std::option::Option<::std::string::String>,
    /// <p>The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.</p>
    /// <p>If you specify an IPv6 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub ipv6: ::std::option::Option<::std::string::String>,
}
impl SubnetConfiguration {
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.</p>
    /// <p>If you specify an IPv4 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn ipv4(&self) -> ::std::option::Option<&str> {
        self.ipv4.as_deref()
    }
    /// <p>The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.</p>
    /// <p>If you specify an IPv6 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn ipv6(&self) -> ::std::option::Option<&str> {
        self.ipv6.as_deref()
    }
}
impl SubnetConfiguration {
    /// Creates a new builder-style object to manufacture [`SubnetConfiguration`](crate::types::SubnetConfiguration).
    pub fn builder() -> crate::types::builders::SubnetConfigurationBuilder {
        crate::types::builders::SubnetConfigurationBuilder::default()
    }
}

/// A builder for [`SubnetConfiguration`](crate::types::SubnetConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubnetConfigurationBuilder {
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipv4: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6: ::std::option::Option<::std::string::String>,
}
impl SubnetConfigurationBuilder {
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.</p>
    /// <p>If you specify an IPv4 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn ipv4(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv4 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.</p>
    /// <p>If you specify an IPv4 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn set_ipv4(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv4 = input;
        self
    }
    /// <p>The IPv4 address to assign to the endpoint network interface in the subnet. You must provide an IPv4 address if the VPC endpoint supports IPv4.</p>
    /// <p>If you specify an IPv4 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn get_ipv4(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv4
    }
    /// <p>The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.</p>
    /// <p>If you specify an IPv6 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn ipv6(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipv6 = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.</p>
    /// <p>If you specify an IPv6 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn set_ipv6(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipv6 = input;
        self
    }
    /// <p>The IPv6 address to assign to the endpoint network interface in the subnet. You must provide an IPv6 address if the VPC endpoint supports IPv6.</p>
    /// <p>If you specify an IPv6 address when modifying a VPC endpoint, we replace the existing endpoint network interface with a new endpoint network interface with this IP address. This process temporarily disconnects the subnet and the VPC endpoint.</p>
    pub fn get_ipv6(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipv6
    }
    /// Consumes the builder and constructs a [`SubnetConfiguration`](crate::types::SubnetConfiguration).
    pub fn build(self) -> crate::types::SubnetConfiguration {
        crate::types::SubnetConfiguration {
            subnet_id: self.subnet_id,
            ipv4: self.ipv4,
            ipv6: self.ipv6,
        }
    }
}
