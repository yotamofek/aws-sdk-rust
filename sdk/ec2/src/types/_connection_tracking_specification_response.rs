// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A security group connection tracking specification response that enables you to set the idle timeout for connection tracking on an Elastic network interface. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts">Connection tracking timeouts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionTrackingSpecificationResponse {
    /// <p>Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.</p>
    pub tcp_established_timeout: ::std::option::Option<i32>,
    /// <p>Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.</p>
    pub udp_stream_timeout: ::std::option::Option<i32>,
    /// <p>Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.</p>
    pub udp_timeout: ::std::option::Option<i32>,
}
impl ConnectionTrackingSpecificationResponse {
    /// <p>Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.</p>
    pub fn tcp_established_timeout(&self) -> ::std::option::Option<i32> {
        self.tcp_established_timeout
    }
    /// <p>Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.</p>
    pub fn udp_stream_timeout(&self) -> ::std::option::Option<i32> {
        self.udp_stream_timeout
    }
    /// <p>Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.</p>
    pub fn udp_timeout(&self) -> ::std::option::Option<i32> {
        self.udp_timeout
    }
}
impl ConnectionTrackingSpecificationResponse {
    /// Creates a new builder-style object to manufacture [`ConnectionTrackingSpecificationResponse`](crate::types::ConnectionTrackingSpecificationResponse).
    pub fn builder() -> crate::types::builders::ConnectionTrackingSpecificationResponseBuilder {
        crate::types::builders::ConnectionTrackingSpecificationResponseBuilder::default()
    }
}

/// A builder for [`ConnectionTrackingSpecificationResponse`](crate::types::ConnectionTrackingSpecificationResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectionTrackingSpecificationResponseBuilder {
    pub(crate) tcp_established_timeout: ::std::option::Option<i32>,
    pub(crate) udp_stream_timeout: ::std::option::Option<i32>,
    pub(crate) udp_timeout: ::std::option::Option<i32>,
}
impl ConnectionTrackingSpecificationResponseBuilder {
    /// <p>Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.</p>
    pub fn tcp_established_timeout(mut self, input: i32) -> Self {
        self.tcp_established_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.</p>
    pub fn set_tcp_established_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tcp_established_timeout = input;
        self
    }
    /// <p>Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.</p>
    pub fn get_tcp_established_timeout(&self) -> &::std::option::Option<i32> {
        &self.tcp_established_timeout
    }
    /// <p>Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.</p>
    pub fn udp_stream_timeout(mut self, input: i32) -> Self {
        self.udp_stream_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.</p>
    pub fn set_udp_stream_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.udp_stream_timeout = input;
        self
    }
    /// <p>Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.</p>
    pub fn get_udp_stream_timeout(&self) -> &::std::option::Option<i32> {
        &self.udp_stream_timeout
    }
    /// <p>Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.</p>
    pub fn udp_timeout(mut self, input: i32) -> Self {
        self.udp_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.</p>
    pub fn set_udp_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.udp_timeout = input;
        self
    }
    /// <p>Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.</p>
    pub fn get_udp_timeout(&self) -> &::std::option::Option<i32> {
        &self.udp_timeout
    }
    /// Consumes the builder and constructs a [`ConnectionTrackingSpecificationResponse`](crate::types::ConnectionTrackingSpecificationResponse).
    pub fn build(self) -> crate::types::ConnectionTrackingSpecificationResponse {
        crate::types::ConnectionTrackingSpecificationResponse {
            tcp_established_timeout: self.tcp_established_timeout,
            udp_stream_timeout: self.udp_stream_timeout,
            udp_timeout: self.udp_timeout,
        }
    }
}
