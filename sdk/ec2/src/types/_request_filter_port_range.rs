// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a port range.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestFilterPortRange {
    /// <p>The first port in the range.</p>
    pub from_port: ::std::option::Option<i32>,
    /// <p>The last port in the range.</p>
    pub to_port: ::std::option::Option<i32>,
}
impl RequestFilterPortRange {
    /// <p>The first port in the range.</p>
    pub fn from_port(&self) -> ::std::option::Option<i32> {
        self.from_port
    }
    /// <p>The last port in the range.</p>
    pub fn to_port(&self) -> ::std::option::Option<i32> {
        self.to_port
    }
}
impl RequestFilterPortRange {
    /// Creates a new builder-style object to manufacture [`RequestFilterPortRange`](crate::types::RequestFilterPortRange).
    pub fn builder() -> crate::types::builders::RequestFilterPortRangeBuilder {
        crate::types::builders::RequestFilterPortRangeBuilder::default()
    }
}

/// A builder for [`RequestFilterPortRange`](crate::types::RequestFilterPortRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestFilterPortRangeBuilder {
    pub(crate) from_port: ::std::option::Option<i32>,
    pub(crate) to_port: ::std::option::Option<i32>,
}
impl RequestFilterPortRangeBuilder {
    /// <p>The first port in the range.</p>
    pub fn from_port(mut self, input: i32) -> Self {
        self.from_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The first port in the range.</p>
    pub fn set_from_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.from_port = input;
        self
    }
    /// <p>The first port in the range.</p>
    pub fn get_from_port(&self) -> &::std::option::Option<i32> {
        &self.from_port
    }
    /// <p>The last port in the range.</p>
    pub fn to_port(mut self, input: i32) -> Self {
        self.to_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last port in the range.</p>
    pub fn set_to_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.to_port = input;
        self
    }
    /// <p>The last port in the range.</p>
    pub fn get_to_port(&self) -> &::std::option::Option<i32> {
        &self.to_port
    }
    /// Consumes the builder and constructs a [`RequestFilterPortRange`](crate::types::RequestFilterPortRange).
    pub fn build(self) -> crate::types::RequestFilterPortRange {
        crate::types::RequestFilterPortRange {
            from_port: self.from_port,
            to_port: self.to_port,
        }
    }
}
