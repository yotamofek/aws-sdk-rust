// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnableImageBlockPublicAccessOutput {
    /// <p>Returns <code>block-new-sharing</code> if the request succeeds; otherwise, it returns an error.</p>
    pub image_block_public_access_state: ::std::option::Option<crate::types::ImageBlockPublicAccessEnabledState>,
    _request_id: Option<String>,
}
impl EnableImageBlockPublicAccessOutput {
    /// <p>Returns <code>block-new-sharing</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn image_block_public_access_state(&self) -> ::std::option::Option<&crate::types::ImageBlockPublicAccessEnabledState> {
        self.image_block_public_access_state.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for EnableImageBlockPublicAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl EnableImageBlockPublicAccessOutput {
    /// Creates a new builder-style object to manufacture [`EnableImageBlockPublicAccessOutput`](crate::operation::enable_image_block_public_access::EnableImageBlockPublicAccessOutput).
    pub fn builder() -> crate::operation::enable_image_block_public_access::builders::EnableImageBlockPublicAccessOutputBuilder {
        crate::operation::enable_image_block_public_access::builders::EnableImageBlockPublicAccessOutputBuilder::default()
    }
}

/// A builder for [`EnableImageBlockPublicAccessOutput`](crate::operation::enable_image_block_public_access::EnableImageBlockPublicAccessOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnableImageBlockPublicAccessOutputBuilder {
    pub(crate) image_block_public_access_state: ::std::option::Option<crate::types::ImageBlockPublicAccessEnabledState>,
    _request_id: Option<String>,
}
impl EnableImageBlockPublicAccessOutputBuilder {
    /// <p>Returns <code>block-new-sharing</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn image_block_public_access_state(mut self, input: crate::types::ImageBlockPublicAccessEnabledState) -> Self {
        self.image_block_public_access_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Returns <code>block-new-sharing</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn set_image_block_public_access_state(mut self, input: ::std::option::Option<crate::types::ImageBlockPublicAccessEnabledState>) -> Self {
        self.image_block_public_access_state = input;
        self
    }
    /// <p>Returns <code>block-new-sharing</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn get_image_block_public_access_state(&self) -> &::std::option::Option<crate::types::ImageBlockPublicAccessEnabledState> {
        &self.image_block_public_access_state
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`EnableImageBlockPublicAccessOutput`](crate::operation::enable_image_block_public_access::EnableImageBlockPublicAccessOutput).
    pub fn build(self) -> crate::operation::enable_image_block_public_access::EnableImageBlockPublicAccessOutput {
        crate::operation::enable_image_block_public_access::EnableImageBlockPublicAccessOutput {
            image_block_public_access_state: self.image_block_public_access_state,
            _request_id: self._request_id,
        }
    }
}
