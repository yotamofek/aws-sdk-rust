// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProvisionIpamByoasnInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>An IPAM ID.</p>
    pub ipam_id: ::std::option::Option<::std::string::String>,
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub asn: ::std::option::Option<::std::string::String>,
    /// <p>An ASN authorization context.</p>
    pub asn_authorization_context: ::std::option::Option<crate::types::AsnAuthorizationContext>,
}
impl ProvisionIpamByoasnInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>An IPAM ID.</p>
    pub fn ipam_id(&self) -> ::std::option::Option<&str> {
        self.ipam_id.as_deref()
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub fn asn(&self) -> ::std::option::Option<&str> {
        self.asn.as_deref()
    }
    /// <p>An ASN authorization context.</p>
    pub fn asn_authorization_context(&self) -> ::std::option::Option<&crate::types::AsnAuthorizationContext> {
        self.asn_authorization_context.as_ref()
    }
}
impl ProvisionIpamByoasnInput {
    /// Creates a new builder-style object to manufacture [`ProvisionIpamByoasnInput`](crate::operation::provision_ipam_byoasn::ProvisionIpamByoasnInput).
    pub fn builder() -> crate::operation::provision_ipam_byoasn::builders::ProvisionIpamByoasnInputBuilder {
        crate::operation::provision_ipam_byoasn::builders::ProvisionIpamByoasnInputBuilder::default()
    }
}

/// A builder for [`ProvisionIpamByoasnInput`](crate::operation::provision_ipam_byoasn::ProvisionIpamByoasnInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProvisionIpamByoasnInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) ipam_id: ::std::option::Option<::std::string::String>,
    pub(crate) asn: ::std::option::Option<::std::string::String>,
    pub(crate) asn_authorization_context: ::std::option::Option<crate::types::AsnAuthorizationContext>,
}
impl ProvisionIpamByoasnInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>An IPAM ID.</p>
    /// This field is required.
    pub fn ipam_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An IPAM ID.</p>
    pub fn set_ipam_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_id = input;
        self
    }
    /// <p>An IPAM ID.</p>
    pub fn get_ipam_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_id
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    /// This field is required.
    pub fn asn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub fn set_asn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asn = input;
        self
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub fn get_asn(&self) -> &::std::option::Option<::std::string::String> {
        &self.asn
    }
    /// <p>An ASN authorization context.</p>
    /// This field is required.
    pub fn asn_authorization_context(mut self, input: crate::types::AsnAuthorizationContext) -> Self {
        self.asn_authorization_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>An ASN authorization context.</p>
    pub fn set_asn_authorization_context(mut self, input: ::std::option::Option<crate::types::AsnAuthorizationContext>) -> Self {
        self.asn_authorization_context = input;
        self
    }
    /// <p>An ASN authorization context.</p>
    pub fn get_asn_authorization_context(&self) -> &::std::option::Option<crate::types::AsnAuthorizationContext> {
        &self.asn_authorization_context
    }
    /// Consumes the builder and constructs a [`ProvisionIpamByoasnInput`](crate::operation::provision_ipam_byoasn::ProvisionIpamByoasnInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::provision_ipam_byoasn::ProvisionIpamByoasnInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::provision_ipam_byoasn::ProvisionIpamByoasnInput {
            dry_run: self.dry_run,
            ipam_id: self.ipam_id,
            asn: self.asn,
            asn_authorization_context: self.asn_authorization_context,
        })
    }
}
