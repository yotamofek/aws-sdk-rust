// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnableSnapshotBlockPublicAccessInput {
    /// <p>The mode in which to enable block public access for snapshots for the Region. Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>block-all-sharing</code> - Prevents all public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. Additionally, snapshots that are already publicly shared are treated as private and they are no longer publicly available.</p><note>
    /// <p>If you enable block public access for snapshots in <code>block-all-sharing</code> mode, it does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p>
    /// </note></li>
    /// <li>
    /// <p><code>block-new-sharing</code> - Prevents only new public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. However, snapshots that are already publicly shared, remain publicly available.</p></li>
    /// </ul>
    pub state: ::std::option::Option<crate::types::SnapshotBlockPublicAccessState>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl EnableSnapshotBlockPublicAccessInput {
    /// <p>The mode in which to enable block public access for snapshots for the Region. Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>block-all-sharing</code> - Prevents all public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. Additionally, snapshots that are already publicly shared are treated as private and they are no longer publicly available.</p><note>
    /// <p>If you enable block public access for snapshots in <code>block-all-sharing</code> mode, it does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p>
    /// </note></li>
    /// <li>
    /// <p><code>block-new-sharing</code> - Prevents only new public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. However, snapshots that are already publicly shared, remain publicly available.</p></li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&crate::types::SnapshotBlockPublicAccessState> {
        self.state.as_ref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl EnableSnapshotBlockPublicAccessInput {
    /// Creates a new builder-style object to manufacture [`EnableSnapshotBlockPublicAccessInput`](crate::operation::enable_snapshot_block_public_access::EnableSnapshotBlockPublicAccessInput).
    pub fn builder() -> crate::operation::enable_snapshot_block_public_access::builders::EnableSnapshotBlockPublicAccessInputBuilder {
        crate::operation::enable_snapshot_block_public_access::builders::EnableSnapshotBlockPublicAccessInputBuilder::default()
    }
}

/// A builder for [`EnableSnapshotBlockPublicAccessInput`](crate::operation::enable_snapshot_block_public_access::EnableSnapshotBlockPublicAccessInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnableSnapshotBlockPublicAccessInputBuilder {
    pub(crate) state: ::std::option::Option<crate::types::SnapshotBlockPublicAccessState>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl EnableSnapshotBlockPublicAccessInputBuilder {
    /// <p>The mode in which to enable block public access for snapshots for the Region. Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>block-all-sharing</code> - Prevents all public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. Additionally, snapshots that are already publicly shared are treated as private and they are no longer publicly available.</p><note>
    /// <p>If you enable block public access for snapshots in <code>block-all-sharing</code> mode, it does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p>
    /// </note></li>
    /// <li>
    /// <p><code>block-new-sharing</code> - Prevents only new public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. However, snapshots that are already publicly shared, remain publicly available.</p></li>
    /// </ul>
    /// This field is required.
    pub fn state(mut self, input: crate::types::SnapshotBlockPublicAccessState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode in which to enable block public access for snapshots for the Region. Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>block-all-sharing</code> - Prevents all public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. Additionally, snapshots that are already publicly shared are treated as private and they are no longer publicly available.</p><note>
    /// <p>If you enable block public access for snapshots in <code>block-all-sharing</code> mode, it does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p>
    /// </note></li>
    /// <li>
    /// <p><code>block-new-sharing</code> - Prevents only new public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. However, snapshots that are already publicly shared, remain publicly available.</p></li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::SnapshotBlockPublicAccessState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The mode in which to enable block public access for snapshots for the Region. Specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>block-all-sharing</code> - Prevents all public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. Additionally, snapshots that are already publicly shared are treated as private and they are no longer publicly available.</p><note>
    /// <p>If you enable block public access for snapshots in <code>block-all-sharing</code> mode, it does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p>
    /// </note></li>
    /// <li>
    /// <p><code>block-new-sharing</code> - Prevents only new public sharing of snapshots in the Region. Users in the account will no longer be able to request new public sharing. However, snapshots that are already publicly shared, remain publicly available.</p></li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::SnapshotBlockPublicAccessState> {
        &self.state
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`EnableSnapshotBlockPublicAccessInput`](crate::operation::enable_snapshot_block_public_access::EnableSnapshotBlockPublicAccessInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::enable_snapshot_block_public_access::EnableSnapshotBlockPublicAccessInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::enable_snapshot_block_public_access::EnableSnapshotBlockPublicAccessInput {
                state: self.state,
                dry_run: self.dry_run,
            },
        )
    }
}
