// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateIpamByoasnInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub asn: ::std::option::Option<::std::string::String>,
    /// <p>The BYOIP CIDR you want to associate with an ASN.</p>
    pub cidr: ::std::option::Option<::std::string::String>,
}
impl AssociateIpamByoasnInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub fn asn(&self) -> ::std::option::Option<&str> {
        self.asn.as_deref()
    }
    /// <p>The BYOIP CIDR you want to associate with an ASN.</p>
    pub fn cidr(&self) -> ::std::option::Option<&str> {
        self.cidr.as_deref()
    }
}
impl AssociateIpamByoasnInput {
    /// Creates a new builder-style object to manufacture [`AssociateIpamByoasnInput`](crate::operation::associate_ipam_byoasn::AssociateIpamByoasnInput).
    pub fn builder() -> crate::operation::associate_ipam_byoasn::builders::AssociateIpamByoasnInputBuilder {
        crate::operation::associate_ipam_byoasn::builders::AssociateIpamByoasnInputBuilder::default()
    }
}

/// A builder for [`AssociateIpamByoasnInput`](crate::operation::associate_ipam_byoasn::AssociateIpamByoasnInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateIpamByoasnInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) asn: ::std::option::Option<::std::string::String>,
    pub(crate) cidr: ::std::option::Option<::std::string::String>,
}
impl AssociateIpamByoasnInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    /// This field is required.
    pub fn asn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub fn set_asn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asn = input;
        self
    }
    /// <p>A public 2-byte or 4-byte ASN.</p>
    pub fn get_asn(&self) -> &::std::option::Option<::std::string::String> {
        &self.asn
    }
    /// <p>The BYOIP CIDR you want to associate with an ASN.</p>
    /// This field is required.
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The BYOIP CIDR you want to associate with an ASN.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The BYOIP CIDR you want to associate with an ASN.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr
    }
    /// Consumes the builder and constructs a [`AssociateIpamByoasnInput`](crate::operation::associate_ipam_byoasn::AssociateIpamByoasnInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::associate_ipam_byoasn::AssociateIpamByoasnInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::associate_ipam_byoasn::AssociateIpamByoasnInput {
            dry_run: self.dry_run,
            asn: self.asn,
            cidr: self.cidr,
        })
    }
}
