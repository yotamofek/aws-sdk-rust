// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisableSnapshotBlockPublicAccess`](crate::operation::disable_snapshot_block_public_access::builders::DisableSnapshotBlockPublicAccessFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dry_run(bool)`](crate::operation::disable_snapshot_block_public_access::builders::DisableSnapshotBlockPublicAccessFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::disable_snapshot_block_public_access::builders::DisableSnapshotBlockPublicAccessFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`DisableSnapshotBlockPublicAccessOutput`](crate::operation::disable_snapshot_block_public_access::DisableSnapshotBlockPublicAccessOutput) with field(s):
    ///   - [`state(Option<SnapshotBlockPublicAccessState>)`](crate::operation::disable_snapshot_block_public_access::DisableSnapshotBlockPublicAccessOutput::state): <p>Returns <code>unblocked</code> if the request succeeds.</p>
    /// - On failure, responds with [`SdkError<DisableSnapshotBlockPublicAccessError>`](crate::operation::disable_snapshot_block_public_access::DisableSnapshotBlockPublicAccessError)
    pub fn disable_snapshot_block_public_access(
        &self,
    ) -> crate::operation::disable_snapshot_block_public_access::builders::DisableSnapshotBlockPublicAccessFluentBuilder {
        crate::operation::disable_snapshot_block_public_access::builders::DisableSnapshotBlockPublicAccessFluentBuilder::new(self.handle.clone())
    }
}
