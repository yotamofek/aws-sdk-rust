// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_locked_snapshots_info(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::LockedSnapshotsInfo, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::LockedSnapshotsInfo::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ownerId") /* OwnerId com.amazonaws.ec2#LockedSnapshotsInfo$OwnerId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_owner_id(var_1);
            }
            ,
            s if s.matches("snapshotId") /* SnapshotId com.amazonaws.ec2#LockedSnapshotsInfo$SnapshotId */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_snapshot_id(var_2);
            }
            ,
            s if s.matches("lockState") /* LockState com.amazonaws.ec2#LockedSnapshotsInfo$LockState */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::LockState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::LockState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_lock_state(var_3);
            }
            ,
            s if s.matches("lockDuration") /* LockDuration com.amazonaws.ec2#LockedSnapshotsInfo$LockDuration */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#RetentionPeriodResponseDays`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_lock_duration(var_4);
            }
            ,
            s if s.matches("coolOffPeriod") /* CoolOffPeriod com.amazonaws.ec2#LockedSnapshotsInfo$CoolOffPeriod */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.ec2#CoolOffPeriodResponseHours`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_cool_off_period(var_5);
            }
            ,
            s if s.matches("coolOffPeriodExpiresOn") /* CoolOffPeriodExpiresOn com.amazonaws.ec2#LockedSnapshotsInfo$CoolOffPeriodExpiresOn */ =>  {
                let var_6 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_cool_off_period_expires_on(var_6);
            }
            ,
            s if s.matches("lockCreatedOn") /* LockCreatedOn com.amazonaws.ec2#LockedSnapshotsInfo$LockCreatedOn */ =>  {
                let var_7 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_lock_created_on(var_7);
            }
            ,
            s if s.matches("lockDurationStartTime") /* LockDurationStartTime com.amazonaws.ec2#LockedSnapshotsInfo$LockDurationStartTime */ =>  {
                let var_8 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_lock_duration_start_time(var_8);
            }
            ,
            s if s.matches("lockExpiresOn") /* LockExpiresOn com.amazonaws.ec2#LockedSnapshotsInfo$LockExpiresOn */ =>  {
                let var_9 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.ec2#MillisecondDateTime`)"))
                        ?
                    )
                ;
                builder = builder.set_lock_expires_on(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
