// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have authorization to perform the requested action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>You can apply up to 10 custom attributes for each resource. You can view the attributes of a resource with <code>ListAttributes</code>. You can remove existing attributes on a resource with <code>DeleteAttributes</code>.</p>
    AttributeLimitExceededException(crate::types::error::AttributeLimitExceededException),
    /// <p>Your Amazon Web Services account was blocked. For more information, contact <a href="http://aws.amazon.com/contact-us/"> Amazon Web Services Support</a>.</p>
    BlockedException(crate::types::error::BlockedException),
    /// <p>These errors are usually caused by a client action. This client action might be using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Or, it might be specifying an identifier that isn't valid.</p>
    ClientException(crate::types::error::ClientException),
    /// <p>You can't delete a cluster that has registered container instances. First, deregister the container instances before you can delete the cluster. For more information, see <code>DeregisterContainerInstance</code>.</p>
    ClusterContainsContainerInstancesException(
        crate::types::error::ClusterContainsContainerInstancesException,
    ),
    /// <p>You can't delete a cluster that contains services. First, update the service to reduce its desired task count to 0, and then delete the service. For more information, see <code>UpdateService</code> and <code>DeleteService</code>.</p>
    ClusterContainsServicesException(crate::types::error::ClusterContainsServicesException),
    /// <p>You can't delete a cluster that has active tasks.</p>
    ClusterContainsTasksException(crate::types::error::ClusterContainsTasksException),
    /// <p>The specified cluster wasn't found. You can view your available clusters with <code>ListClusters</code>. Amazon ECS clusters are Region specific.</p>
    ClusterNotFoundException(crate::types::error::ClusterNotFoundException),
    /// <p>The <code>RunTask</code> request could not be processed due to conflicts. The provided <code>clientToken</code> is already in use with a different <code>RunTask</code> request. The <code>resourceIds</code> are the existing task ARNs which are already associated with the <code>clientToken</code>.</p>
    /// <p>To fix this issue:</p>
    /// <ul>
    /// <li>
    /// <p>Run <code>RunTask</code> with a unique <code>clientToken</code>.</p></li>
    /// <li>
    /// <p>Run <code>RunTask</code> with the <code>clientToken</code> and the original set of parameters</p></li>
    /// </ul>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The specified parameter isn't valid. Review the available parameters for the API request.</p>
    InvalidParameterException(crate::types::error::InvalidParameterException),
    /// <p>The limit for the resource was exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>Amazon ECS can't determine the current version of the Amazon ECS container agent on the container instance and doesn't have enough information to proceed with an update. This could be because the agent running on the container instance is a previous or custom version that doesn't use our version information.</p>
    MissingVersionException(crate::types::error::MissingVersionException),
    /// <p>The specified namespace wasn't found.</p>
    NamespaceNotFoundException(crate::types::error::NamespaceNotFoundException),
    /// <p>There's no update available for this Amazon ECS container agent. This might be because the agent is already running the latest version or because it's so old that there's no update path to the current version.</p>
    NoUpdateAvailableException(crate::types::error::NoUpdateAvailableException),
    /// <p>The specified platform version doesn't satisfy the required capabilities of the task definition.</p>
    PlatformTaskDefinitionIncompatibilityException(
        crate::types::error::PlatformTaskDefinitionIncompatibilityException,
    ),
    /// <p>The specified platform version doesn't exist.</p>
    PlatformUnknownException(crate::types::error::PlatformUnknownException),
    /// <p>The specified resource is in-use and can't be removed.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The specified resource wasn't found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>These errors are usually caused by a server issue.</p>
    ServerException(crate::types::error::ServerException),
    /// <p>The specified service isn't active. You can't update a service that's inactive. If you have previously deleted a service, you can re-create it with <code>CreateService</code>.</p>
    ServiceNotActiveException(crate::types::error::ServiceNotActiveException),
    /// <p>The specified service wasn't found. You can view your available services with <code>ListServices</code>. Amazon ECS services are cluster specific and Region specific.</p>
    ServiceNotFoundException(crate::types::error::ServiceNotFoundException),
    /// <p>The execute command cannot run. This error can be caused by any of the following configuration issues:</p>
    /// <ul>
    /// <li>
    /// <p>Incorrect IAM permissions</p></li>
    /// <li>
    /// <p>The SSM agent is not installed or is not running</p></li>
    /// <li>
    /// <p>There is an interface Amazon VPC endpoint for Amazon ECS, but there is not one for Systems Manager Session Manager</p></li>
    /// </ul>
    /// <p>For information about how to troubleshoot the issues, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html">Troubleshooting issues with ECS Exec</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    TargetNotConnectedException(crate::types::error::TargetNotConnectedException),
    /// <p>The specified target wasn't found. You can view your available container instances with <code>ListContainerInstances</code>. Amazon ECS container instances are cluster-specific and Region-specific.</p>
    TargetNotFoundException(crate::types::error::TargetNotFoundException),
    /// <p>The specified task set wasn't found. You can view your available task sets with <code>DescribeTaskSets</code>. Task sets are specific to each cluster, service and Region.</p>
    TaskSetNotFoundException(crate::types::error::TaskSetNotFoundException),
    /// <p>The specified task isn't supported in this Region.</p>
    UnsupportedFeatureException(crate::types::error::UnsupportedFeatureException),
    /// <p>There's already a current Amazon ECS container agent update in progress on the container instance that's specified. If the container agent becomes disconnected while it's in a transitional stage, such as <code>PENDING</code> or <code>STAGING</code>, the update process can get stuck in that state. However, when the agent reconnects, it resumes where it stopped previously.</p>
    UpdateInProgressException(crate::types::error::UpdateInProgressException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(
        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error."
    )]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AttributeLimitExceededException(inner) => inner.fmt(f),
            Error::BlockedException(inner) => inner.fmt(f),
            Error::ClientException(inner) => inner.fmt(f),
            Error::ClusterContainsContainerInstancesException(inner) => inner.fmt(f),
            Error::ClusterContainsServicesException(inner) => inner.fmt(f),
            Error::ClusterContainsTasksException(inner) => inner.fmt(f),
            Error::ClusterNotFoundException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MissingVersionException(inner) => inner.fmt(f),
            Error::NamespaceNotFoundException(inner) => inner.fmt(f),
            Error::NoUpdateAvailableException(inner) => inner.fmt(f),
            Error::PlatformTaskDefinitionIncompatibilityException(inner) => inner.fmt(f),
            Error::PlatformUnknownException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServerException(inner) => inner.fmt(f),
            Error::ServiceNotActiveException(inner) => inner.fmt(f),
            Error::ServiceNotFoundException(inner) => inner.fmt(f),
            Error::TargetNotConnectedException(inner) => inner.fmt(f),
            Error::TargetNotFoundException(inner) => inner.fmt(f),
            Error::TaskSetNotFoundException(inner) => inner.fmt(f),
            Error::UnsupportedFeatureException(inner) => inner.fmt(f),
            Error::UpdateInProgressException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) =
                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
                {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::AttributeLimitExceededException(inner) => inner.meta(),
            Self::BlockedException(inner) => inner.meta(),
            Self::ClientException(inner) => inner.meta(),
            Self::ClusterContainsContainerInstancesException(inner) => inner.meta(),
            Self::ClusterContainsServicesException(inner) => inner.meta(),
            Self::ClusterContainsTasksException(inner) => inner.meta(),
            Self::ClusterNotFoundException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InvalidParameterException(inner) => inner.meta(),
            Self::LimitExceededException(inner) => inner.meta(),
            Self::MissingVersionException(inner) => inner.meta(),
            Self::NamespaceNotFoundException(inner) => inner.meta(),
            Self::NoUpdateAvailableException(inner) => inner.meta(),
            Self::PlatformTaskDefinitionIncompatibilityException(inner) => inner.meta(),
            Self::PlatformUnknownException(inner) => inner.meta(),
            Self::ResourceInUseException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServerException(inner) => inner.meta(),
            Self::ServiceNotActiveException(inner) => inner.meta(),
            Self::ServiceNotFoundException(inner) => inner.meta(),
            Self::TargetNotConnectedException(inner) => inner.meta(),
            Self::TargetNotFoundException(inner) => inner.meta(),
            Self::TaskSetNotFoundException(inner) => inner.meta(),
            Self::UnsupportedFeatureException(inner) => inner.meta(),
            Self::UpdateInProgressException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_task_definition::DescribeTaskDefinitionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_task_definition::DescribeTaskDefinitionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_task_definition::DescribeTaskDefinitionError> for Error {
    fn from(err: crate::operation::describe_task_definition::DescribeTaskDefinitionError) -> Self {
        match err {
            crate::operation::describe_task_definition::DescribeTaskDefinitionError::ClientException(inner) => Error::ClientException(inner),
            crate::operation::describe_task_definition::DescribeTaskDefinitionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::describe_task_definition::DescribeTaskDefinitionError::ServerException(inner) => Error::ServerException(inner),
            crate::operation::describe_task_definition::DescribeTaskDefinitionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_service::UpdateServiceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_service::UpdateServiceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_service::UpdateServiceError> for Error {
    fn from(err: crate::operation::update_service::UpdateServiceError) -> Self {
        match err {
            crate::operation::update_service::UpdateServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service::UpdateServiceError::ClientException(inner) => Error::ClientException(inner),
            crate::operation::update_service::UpdateServiceError::ClusterNotFoundException(inner) => Error::ClusterNotFoundException(inner),
            crate::operation::update_service::UpdateServiceError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_service::UpdateServiceError::NamespaceNotFoundException(inner) => Error::NamespaceNotFoundException(inner),
            crate::operation::update_service::UpdateServiceError::PlatformTaskDefinitionIncompatibilityException(inner) => {
                Error::PlatformTaskDefinitionIncompatibilityException(inner)
            }
            crate::operation::update_service::UpdateServiceError::PlatformUnknownException(inner) => Error::PlatformUnknownException(inner),
            crate::operation::update_service::UpdateServiceError::ServerException(inner) => Error::ServerException(inner),
            crate::operation::update_service::UpdateServiceError::ServiceNotActiveException(inner) => Error::ServiceNotActiveException(inner),
            crate::operation::update_service::UpdateServiceError::ServiceNotFoundException(inner) => Error::ServiceNotFoundException(inner),
            crate::operation::update_service::UpdateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::AttributeLimitExceededException(inner) => inner.source(),
            Error::BlockedException(inner) => inner.source(),
            Error::ClientException(inner) => inner.source(),
            Error::ClusterContainsContainerInstancesException(inner) => inner.source(),
            Error::ClusterContainsServicesException(inner) => inner.source(),
            Error::ClusterContainsTasksException(inner) => inner.source(),
            Error::ClusterNotFoundException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InvalidParameterException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::MissingVersionException(inner) => inner.source(),
            Error::NamespaceNotFoundException(inner) => inner.source(),
            Error::NoUpdateAvailableException(inner) => inner.source(),
            Error::PlatformTaskDefinitionIncompatibilityException(inner) => inner.source(),
            Error::PlatformUnknownException(inner) => inner.source(),
            Error::ResourceInUseException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServerException(inner) => inner.source(),
            Error::ServiceNotActiveException(inner) => inner.source(),
            Error::ServiceNotFoundException(inner) => inner.source(),
            Error::TargetNotConnectedException(inner) => inner.source(),
            Error::TargetNotFoundException(inner) => inner.source(),
            Error::TaskSetNotFoundException(inner) => inner.source(),
            Error::UnsupportedFeatureException(inner) => inner.source(),
            Error::UpdateInProgressException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AttributeLimitExceededException(e) => e.request_id(),
            Self::BlockedException(e) => e.request_id(),
            Self::ClientException(e) => e.request_id(),
            Self::ClusterContainsContainerInstancesException(e) => e.request_id(),
            Self::ClusterContainsServicesException(e) => e.request_id(),
            Self::ClusterContainsTasksException(e) => e.request_id(),
            Self::ClusterNotFoundException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MissingVersionException(e) => e.request_id(),
            Self::NamespaceNotFoundException(e) => e.request_id(),
            Self::NoUpdateAvailableException(e) => e.request_id(),
            Self::PlatformTaskDefinitionIncompatibilityException(e) => e.request_id(),
            Self::PlatformUnknownException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServerException(e) => e.request_id(),
            Self::ServiceNotActiveException(e) => e.request_id(),
            Self::ServiceNotFoundException(e) => e.request_id(),
            Self::TargetNotConnectedException(e) => e.request_id(),
            Self::TargetNotFoundException(e) => e.request_id(),
            Self::TaskSetNotFoundException(e) => e.request_id(),
            Self::UnsupportedFeatureException(e) => e.request_id(),
            Self::UpdateInProgressException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
